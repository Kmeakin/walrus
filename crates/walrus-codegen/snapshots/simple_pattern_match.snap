---
source: crates/walrus-codegen/src/tests.rs
expression: module

---
; ModuleID = 'module'
source_filename = "module"

%Option = type { i8, { i32 } }

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define {} @builtins.putchar.wrapper(i8* %env, i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret {} zeroinitializer
}

declare i32 @putchar(i32)

define i32 @main(i8* %main.env) {
main.entry:
  %Option.alloca = alloca %Option, align 8
  %Option.discriminant.gep = getelementptr inbounds %Option, %Option* %Option.alloca, i32 0, i32 0
  store i8 1, i8* %Option.discriminant.gep, align 1
  %Option.payload.gep = getelementptr inbounds %Option, %Option* %Option.alloca, i32 0, i32 1
  %"Option::Some.x.gep" = getelementptr inbounds { i32 }, { i32 }* %Option.payload.gep, i32 0, i32 0
  store i32 1, i32* %"Option::Some.x.gep", align 4
  %Option.load = load %Option, %Option* %Option.alloca, align 4
  %opt.alloca = alloca %Option, align 8
  store %Option %Option.load, %Option* %opt.alloca, align 4
  %opt = load %Option, %Option* %opt.alloca, align 4
  br label %match.case0.test

match.case0.test:                                 ; preds = %main.entry
  %Option.discriminant2 = extractvalue %Option %opt, 0
  %"Option::None.cmp_discriminant" = icmp eq i8 %Option.discriminant2, 0
  br i1 %"Option::None.cmp_discriminant", label %"match.case0.Option::None.then", label %"match.case0.Option::None.else"

"match.case0.Option::None.then":                  ; preds = %match.case0.test
  %Option.payload3 = extractvalue %Option %opt, 1
  br label %"match.case0.Option::None.end"

"match.case0.Option::None.else":                  ; preds = %match.case0.test
  br label %"match.case0.Option::None.end"

"match.case0.Option::None.end":                   ; preds = %"match.case0.Option::None.then", %"match.case0.Option::None.else"
  %"match.case0.Option::None.phi" = phi i1 [ true, %"match.case0.Option::None.then" ], [ false, %"match.case0.Option::None.else" ]
  br i1 %"match.case0.Option::None.phi", label %match.case0.then, label %match.case1.test

match.case0.then:                                 ; preds = %"match.case0.Option::None.end"
  %Option.payload4 = extractvalue %Option %opt, 1
  br label %match.end

match.case1.test:                                 ; preds = %"match.case0.Option::None.end"
  %Option.discriminant = extractvalue %Option %opt, 0
  %"Option::Some.cmp_discriminant" = icmp eq i8 %Option.discriminant, 1
  br i1 %"Option::Some.cmp_discriminant", label %"match.case1.Option::Some.then", label %"match.case1.Option::Some.else"

"match.case1.Option::Some.then":                  ; preds = %match.case1.test
  %Option.payload = extractvalue %Option %opt, 1
  br label %"match.case1.Option::Some.end"

"match.case1.Option::Some.else":                  ; preds = %match.case1.test
  br label %"match.case1.Option::Some.end"

"match.case1.Option::Some.end":                   ; preds = %"match.case1.Option::Some.then", %"match.case1.Option::Some.else"
  %"match.case1.Option::Some.phi" = phi i1 [ true, %"match.case1.Option::Some.then" ], [ false, %"match.case1.Option::Some.else" ]
  br i1 %"match.case1.Option::Some.phi", label %match.case1.then, label %match.fail

match.case1.then:                                 ; preds = %"match.case1.Option::Some.end"
  %Option.payload1 = extractvalue %Option %opt, 1
  %"Option::Some.x" = extractvalue { i32 } %Option.payload1, 0
  %x.alloca = alloca i32, align 4
  store i32 %"Option::Some.x", i32* %x.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  br label %match.end

match.fail:                                       ; preds = %"match.case1.Option::Some.end"
  unreachable

match.end:                                        ; preds = %match.case0.then, %match.case1.then
  %match.phi = phi i32 [ %x, %match.case1.then ], [ 0, %match.case0.then ]
  ret i32 %match.phi
}

