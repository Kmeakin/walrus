---
source: crates/walrus-codegen/src/tests.rs
expression: module

---
; ModuleID = 'module'
source_filename = "module"

%Foo = type { i32, i32 }

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define i32 @builtins.putchar.wrapper(i8* %env, i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret i32 %1
}

declare i32 @putchar(i32)

define i32 @main(i8* %main.env) {
main.entry:
  %Foo.alloca = alloca %Foo, align 8
  %Foo.x.gep = getelementptr inbounds %Foo, %Foo* %Foo.alloca, i32 0, i32 0
  store i32 5, i32* %Foo.x.gep, align 4
  %Foo.y.gep = getelementptr inbounds %Foo, %Foo* %Foo.alloca, i32 0, i32 1
  store i32 10, i32* %Foo.y.gep, align 4
  %Foo = load %Foo, %Foo* %Foo.alloca, align 4
  %Foo.y = extractvalue %Foo %Foo, 1
  %y.alloca = alloca i32, align 4
  store i32 %Foo.y, i32* %y.alloca, align 4
  %Foo.x = extractvalue %Foo %Foo, 0
  %x.alloca = alloca i32, align 4
  store i32 %Foo.x, i32* %x.alloca, align 4
  %y = load i32, i32* %y.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  %0 = sub i32 %y, %x
  ret i32 %0
}

