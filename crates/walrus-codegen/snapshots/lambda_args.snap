---
source: crates/walrus-codegen/src/codegen.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define i32 @main(i8* %main.env) {
main.entry:
  %closure.alloca = alloca { i32 (i8*, i32, i32)*, i8* }, align 8
  %closure.code = getelementptr inbounds { i32 (i8*, i32, i32)*, i8* }, { i32 (i8*, i32, i32)*, i8* }* %closure.alloca, i32 0, i32 0
  store i32 (i8*, i32, i32)* @lambda, i32 (i8*, i32, i32)** %closure.code, align 8
  %closure.env = getelementptr inbounds { i32 (i8*, i32, i32)*, i8* }, { i32 (i8*, i32, i32)*, i8* }* %closure.alloca, i32 0, i32 1
  %env.alloca = alloca {}, align 8
  %env = bitcast {}* %env.alloca to i8*
  store i8* %env, i8** %closure.env, align 8
  %closure = load { i32 (i8*, i32, i32)*, i8* }, { i32 (i8*, i32, i32)*, i8* }* %closure.alloca, align 8
  %add.alloca = alloca { i32 (i8*, i32, i32)*, i8* }, align 8
  store { i32 (i8*, i32, i32)*, i8* } %closure, { i32 (i8*, i32, i32)*, i8* }* %add.alloca, align 8
  %add = load { i32 (i8*, i32, i32)*, i8* }, { i32 (i8*, i32, i32)*, i8* }* %add.alloca, align 8
  %closure.code1 = extractvalue { i32 (i8*, i32, i32)*, i8* } %add, 0
  %closure.env2 = extractvalue { i32 (i8*, i32, i32)*, i8* } %add, 1
  %call = call i32 %closure.code1(i8* %closure.env2, i32 2, i32 3)
  ret i32 %call
}

define i32 @lambda(i8* %env_ptr, i32 %params.0, i32 %params.1) {
lambda.entry:
  %env_ptr1 = bitcast i8* %env_ptr to {}*
  %env = load {}, {}* %env_ptr1, align 1
  %x.alloca = alloca i32, align 4
  store i32 %params.0, i32* %x.alloca, align 4
  %y.alloca = alloca i32, align 4
  store i32 %params.1, i32* %y.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  %y = load i32, i32* %y.alloca, align 4
  %0 = add i32 %x, %y
  ret i32 %0
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }

