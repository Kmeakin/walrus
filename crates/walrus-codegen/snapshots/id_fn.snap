---
source: crates/walrus-codegen/src/codegen.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define i32 @main(i8* %main.env) {
main.entry:
  %id.closure.alloca = alloca { i32 (i8*, i32)*, i8* }, align 8
  %id.closure.code = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %id.closure.alloca, i32 0, i32 0
  store i32 (i8*, i32)* @id, i32 (i8*, i32)** %id.closure.code, align 8
  %id.closure.env = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %id.closure.alloca, i32 0, i32 1
  store i8* null, i8** %id.closure.env, align 8
  %id = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %id.closure.alloca, align 8
  %closure.code = extractvalue { i32 (i8*, i32)*, i8* } %id, 0
  %closure.env = extractvalue { i32 (i8*, i32)*, i8* } %id, 1
  %call = call i32 %closure.code(i8* %closure.env, i32 5)
  ret i32 %call
}

define i32 @id(i8* %id.env, i32 %id.params.0) {
id.entry:
  %x.alloca = alloca i32, align 4
  store i32 %id.params.0, i32* %x.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  ret i32 %x
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }

