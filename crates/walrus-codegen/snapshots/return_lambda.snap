---
source: crates/walrus-codegen/src/codegen.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define { i32 (i8*, i32)*, i8* } @const_(i8* %const_.env, i32 %const_.params.0) {
const_.entry:
  %k.alloca = alloca i32, align 4
  store i32 %const_.params.0, i32* %k.alloca, align 4
  %closure.alloca = alloca { i32 (i8*, i32)*, i8* }, align 8
  %closure.code = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, i32 0, i32 0
  store i32 (i8*, i32)* @lambda, i32 (i8*, i32)** %closure.code, align 8
  %closure.env = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, i32 0, i32 1
  %env.alloca = alloca { i32 }, align 8
  %env.0.gep = getelementptr inbounds { i32 }, { i32 }* %env.alloca, i32 0, i32 0
  %env.0 = load i32, i32* %k.alloca, align 4
  store i32 %env.0, i32* %env.0.gep, align 4
  %env = bitcast { i32 }* %env.alloca to i8*
  store i8* %env, i8** %closure.env, align 8
  %closure = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, align 8
  ret { i32 (i8*, i32)*, i8* } %closure
}

define i32 @main(i8* %main.env) {
main.entry:
  %const_.closure.alloca = alloca { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }, align 8
  %const_.closure.code = getelementptr inbounds { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }, { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }* %const_.closure.alloca, i32 0, i32 0
  store { i32 (i8*, i32)*, i8* } (i8*, i32)* @const_, { i32 (i8*, i32)*, i8* } (i8*, i32)** %const_.closure.code, align 8
  %const_.closure.env = getelementptr inbounds { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }, { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }* %const_.closure.alloca, i32 0, i32 1
  store i8* null, i8** %const_.closure.env, align 8
  %const_ = load { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }, { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* }* %const_.closure.alloca, align 8
  %closure.code = extractvalue { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* } %const_, 0
  %closure.env = extractvalue { { i32 (i8*, i32)*, i8* } (i8*, i32)*, i8* } %const_, 1
  %call = call { i32 (i8*, i32)*, i8* } %closure.code(i8* %closure.env, i32 5)
  %const_five.alloca = alloca { i32 (i8*, i32)*, i8* }, align 8
  store { i32 (i8*, i32)*, i8* } %call, { i32 (i8*, i32)*, i8* }* %const_five.alloca, align 8
  %const_five = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %const_five.alloca, align 8
  %closure.code1 = extractvalue { i32 (i8*, i32)*, i8* } %const_five, 0
  %closure.env2 = extractvalue { i32 (i8*, i32)*, i8* } %const_five, 1
  %call3 = call i32 %closure.code1(i8* %closure.env2, i32 0)
  ret i32 %call3
}

define i32 @lambda(i8* %env_ptr, i32 %params.0) {
lambda.entry:
  %env_ptr1 = bitcast i8* %env_ptr to { i32 }*
  %env = load { i32 }, { i32 }* %env_ptr1, align 4
  %env.0 = extractvalue { i32 } %env, 0
  %k.alloca = alloca i32, align 4
  store i32 %env.0, i32* %k.alloca, align 4
  %_.alloca = alloca i32, align 4
  store i32 %params.0, i32* %_.alloca, align 4
  %k = load i32, i32* %k.alloca, align 4
  ret i32 %k
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }

