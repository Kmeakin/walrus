---
source: crates/walrus-codegen/src/codegen.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define i32 @main(i8* %main.env) {
main.entry:
  %Foo.alloca = alloca { i32, i32 }, align 8
  %Foo.x = getelementptr inbounds { i32, i32 }, { i32, i32 }* %Foo.alloca, i32 0, i32 0
  store i32 5, i32* %Foo.x, align 4
  %Foo.y = getelementptr inbounds { i32, i32 }, { i32, i32 }* %Foo.alloca, i32 0, i32 1
  store i32 6, i32* %Foo.y, align 4
  %Foo = load { i32, i32 }, { i32, i32 }* %Foo.alloca, align 4
  %foo.alloca = alloca { i32, i32 }, align 8
  store { i32, i32 } %Foo, { i32, i32 }* %foo.alloca, align 4
  %foo = load { i32, i32 }, { i32, i32 }* %foo.alloca, align 4
  %Foo.y1 = extractvalue { i32, i32 } %foo, 1
  ret i32 %Foo.y1
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }

