---
source: crates/walrus-codegen/src/tests.rs
expression: module

---
; ModuleID = 'module'
source_filename = "module"

define void @builtins.exit(i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define {} @builtins.putchar(i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret {} zeroinitializer
}

declare i32 @putchar(i32)

define i32 @main() {
main.entry:
  %tuple.alloca = alloca { i32, i32 }, align 8
  %tuple.0.gep = getelementptr inbounds { i32, i32 }, { i32, i32 }* %tuple.alloca, i32 0, i32 0
  store i32 5, i32* %tuple.0.gep, align 4
  %tuple.1.gep = getelementptr inbounds { i32, i32 }, { i32, i32 }* %tuple.alloca, i32 0, i32 1
  store i32 6, i32* %tuple.1.gep, align 4
  %tuple = load { i32, i32 }, { i32, i32 }* %tuple.alloca, align 4
  %tuple.0 = extractvalue { i32, i32 } %tuple, 0
  %x.alloca = alloca i32, align 4
  store i32 %tuple.0, i32* %x.alloca, align 4
  %tuple.1 = extractvalue { i32, i32 } %tuple, 1
  %y.alloca = alloca i32, align 4
  store i32 %tuple.1, i32* %y.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  ret i32 %x
}

