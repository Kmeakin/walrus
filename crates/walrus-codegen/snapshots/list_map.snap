---
source: crates/walrus-codegen/src/tests.rs
expression: module

---
; ModuleID = 'module'
source_filename = "module"

%List = type { i8, { i32, %List* } }

define %List @map(%List %map.params.0, { i32 (i8*, i32)*, i8* } %map.params.1) {
map.entry:
  %l.alloca = alloca %List, align 8
  store %List %map.params.0, %List* %l.alloca, align 8
  %f.alloca = alloca { i32 (i8*, i32)*, i8* }, align 8
  store { i32 (i8*, i32)*, i8* } %map.params.1, { i32 (i8*, i32)*, i8* }* %f.alloca, align 8
  %l = load %List, %List* %l.alloca, align 8
  br label %match.case0.test

match.case0.test:                                 ; preds = %map.entry
  %List.discriminant3 = extractvalue %List %l, 0
  %"List::Nil.cmp_discriminant" = icmp eq i8 %List.discriminant3, 0
  br i1 %"List::Nil.cmp_discriminant", label %"match.case0.List::Nil.then", label %"match.case0.List::Nil.end"

"match.case0.List::Nil.then":                     ; preds = %match.case0.test
  %List.payload4 = extractvalue %List %l, 1
  br label %"match.case0.List::Nil.end"

"match.case0.List::Nil.end":                      ; preds = %"match.case0.List::Nil.then", %match.case0.test
  %"match.case0.List::Nil.phi" = phi i1 [ true, %"match.case0.List::Nil.then" ], [ false, %match.case0.test ]
  br i1 %"match.case0.List::Nil.phi", label %match.case0.then, label %match.case1.test

match.case0.then:                                 ; preds = %"match.case0.List::Nil.end"
  %List.payload5 = extractvalue %List %l, 1
  %List.alloca6 = alloca %List, align 8
  %List.discriminant.gep7 = getelementptr inbounds %List, %List* %List.alloca6, i32 0, i32 0
  store i8 0, i8* %List.discriminant.gep7, align 1
  %List.payload.gep8 = getelementptr inbounds %List, %List* %List.alloca6, i32 0, i32 1
  %List.load9 = load %List, %List* %List.alloca6, align 8
  br label %match.end

match.case1.test:                                 ; preds = %"match.case0.List::Nil.end"
  %List.discriminant = extractvalue %List %l, 0
  %"List::Cons.cmp_discriminant" = icmp eq i8 %List.discriminant, 1
  br i1 %"List::Cons.cmp_discriminant", label %"match.case1.List::Cons.then", label %"match.case1.List::Cons.end"

"match.case1.List::Cons.then":                    ; preds = %match.case1.test
  %List.payload = extractvalue %List %l, 1
  br label %"match.case1.List::Cons.end"

"match.case1.List::Cons.end":                     ; preds = %"match.case1.List::Cons.then", %match.case1.test
  %"match.case1.List::Cons.phi" = phi i1 [ true, %"match.case1.List::Cons.then" ], [ false, %match.case1.test ]
  br i1 %"match.case1.List::Cons.phi", label %match.case1.then, label %match.fail

match.case1.then:                                 ; preds = %"match.case1.List::Cons.end"
  %List.payload1 = extractvalue %List %l, 1
  %"List::Cons.head" = extractvalue { i32, %List* } %List.payload1, 0
  %head.alloca = alloca i32, align 4
  store i32 %"List::Cons.head", i32* %head.alloca, align 4
  %"List::Cons.tail" = extractvalue { i32, %List* } %List.payload1, 1
  %"List::Cons.tail.load" = load %List, %List* %"List::Cons.tail", align 8
  %tail.alloca = alloca %List, align 8
  store %List %"List::Cons.tail.load", %List* %tail.alloca, align 8
  %List.alloca = alloca %List, align 8
  %List.discriminant.gep = getelementptr inbounds %List, %List* %List.alloca, i32 0, i32 0
  store i8 1, i8* %List.discriminant.gep, align 1
  %List.payload.gep = getelementptr inbounds %List, %List* %List.alloca, i32 0, i32 1
  %head = load i32, i32* %head.alloca, align 4
  %f = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %f.alloca, align 8
  %closure.code = extractvalue { i32 (i8*, i32)*, i8* } %f, 0
  %closure.env = extractvalue { i32 (i8*, i32)*, i8* } %f, 1
  %lambda.call = call i32 %closure.code(i8* %closure.env, i32 %head)
  %"List::Cons.head.gep" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep, i32 0, i32 0
  store i32 %lambda.call, i32* %"List::Cons.head.gep", align 4
  %tail = load %List, %List* %tail.alloca, align 8
  %f2 = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %f.alloca, align 8
  %map.call = call %List @map(%List %tail, { i32 (i8*, i32)*, i8* } %f2)
  %"List::Cons.tail.gep" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep, i32 0, i32 1
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%List* getelementptr (%List, %List* null, i32 1) to i32))
  %"List::Cons.tail.malloc" = bitcast i8* %malloccall to %List*
  store %List %map.call, %List* %"List::Cons.tail.malloc", align 8
  store %List* %"List::Cons.tail.malloc", %List** %"List::Cons.tail.gep", align 8
  %List.load = load %List, %List* %List.alloca, align 8
  br label %match.end

match.fail:                                       ; preds = %"match.case1.List::Cons.end"
  unreachable

match.end:                                        ; preds = %match.case0.then, %match.case1.then
  %match.phi = phi %List [ %List.load, %match.case1.then ], [ %List.load9, %match.case0.then ]
  ret %List %match.phi
}

define i32 @sum(%List %sum.params.0) {
sum.entry:
  %l.alloca = alloca %List, align 8
  store %List %sum.params.0, %List* %l.alloca, align 8
  %l = load %List, %List* %l.alloca, align 8
  br label %match.case0.test

match.case0.test:                                 ; preds = %sum.entry
  %List.discriminant2 = extractvalue %List %l, 0
  %"List::Nil.cmp_discriminant" = icmp eq i8 %List.discriminant2, 0
  br i1 %"List::Nil.cmp_discriminant", label %"match.case0.List::Nil.then", label %"match.case0.List::Nil.end"

"match.case0.List::Nil.then":                     ; preds = %match.case0.test
  %List.payload3 = extractvalue %List %l, 1
  br label %"match.case0.List::Nil.end"

"match.case0.List::Nil.end":                      ; preds = %"match.case0.List::Nil.then", %match.case0.test
  %"match.case0.List::Nil.phi" = phi i1 [ true, %"match.case0.List::Nil.then" ], [ false, %match.case0.test ]
  br i1 %"match.case0.List::Nil.phi", label %match.case0.then, label %match.case1.test

match.case0.then:                                 ; preds = %"match.case0.List::Nil.end"
  %List.payload4 = extractvalue %List %l, 1
  br label %match.end

match.case1.test:                                 ; preds = %"match.case0.List::Nil.end"
  %List.discriminant = extractvalue %List %l, 0
  %"List::Cons.cmp_discriminant" = icmp eq i8 %List.discriminant, 1
  br i1 %"List::Cons.cmp_discriminant", label %"match.case1.List::Cons.then", label %"match.case1.List::Cons.end"

"match.case1.List::Cons.then":                    ; preds = %match.case1.test
  %List.payload = extractvalue %List %l, 1
  br label %"match.case1.List::Cons.end"

"match.case1.List::Cons.end":                     ; preds = %"match.case1.List::Cons.then", %match.case1.test
  %"match.case1.List::Cons.phi" = phi i1 [ true, %"match.case1.List::Cons.then" ], [ false, %match.case1.test ]
  br i1 %"match.case1.List::Cons.phi", label %match.case1.then, label %match.fail

match.case1.then:                                 ; preds = %"match.case1.List::Cons.end"
  %List.payload1 = extractvalue %List %l, 1
  %"List::Cons.head" = extractvalue { i32, %List* } %List.payload1, 0
  %head.alloca = alloca i32, align 4
  store i32 %"List::Cons.head", i32* %head.alloca, align 4
  %"List::Cons.tail" = extractvalue { i32, %List* } %List.payload1, 1
  %"List::Cons.tail.load" = load %List, %List* %"List::Cons.tail", align 8
  %tail.alloca = alloca %List, align 8
  store %List %"List::Cons.tail.load", %List* %tail.alloca, align 8
  %head = load i32, i32* %head.alloca, align 4
  %tail = load %List, %List* %tail.alloca, align 8
  %sum.call = call i32 @sum(%List %tail)
  %Int.add = add i32 %head, %sum.call
  br label %match.end

match.fail:                                       ; preds = %"match.case1.List::Cons.end"
  unreachable

match.end:                                        ; preds = %match.case0.then, %match.case1.then
  %match.phi = phi i32 [ %Int.add, %match.case1.then ], [ 0, %match.case0.then ]
  ret i32 %match.phi
}

define i32 @main() {
main.entry:
  %List.alloca = alloca %List, align 8
  %List.discriminant.gep = getelementptr inbounds %List, %List* %List.alloca, i32 0, i32 0
  store i8 1, i8* %List.discriminant.gep, align 1
  %List.payload.gep = getelementptr inbounds %List, %List* %List.alloca, i32 0, i32 1
  %"List::Cons.head.gep" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep, i32 0, i32 0
  store i32 4, i32* %"List::Cons.head.gep", align 4
  %List.alloca1 = alloca %List, align 8
  %List.discriminant.gep2 = getelementptr inbounds %List, %List* %List.alloca1, i32 0, i32 0
  store i8 1, i8* %List.discriminant.gep2, align 1
  %List.payload.gep3 = getelementptr inbounds %List, %List* %List.alloca1, i32 0, i32 1
  %"List::Cons.head.gep4" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep3, i32 0, i32 0
  store i32 3, i32* %"List::Cons.head.gep4", align 4
  %List.alloca5 = alloca %List, align 8
  %List.discriminant.gep6 = getelementptr inbounds %List, %List* %List.alloca5, i32 0, i32 0
  store i8 1, i8* %List.discriminant.gep6, align 1
  %List.payload.gep7 = getelementptr inbounds %List, %List* %List.alloca5, i32 0, i32 1
  %"List::Cons.head.gep8" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep7, i32 0, i32 0
  store i32 2, i32* %"List::Cons.head.gep8", align 4
  %List.alloca9 = alloca %List, align 8
  %List.discriminant.gep10 = getelementptr inbounds %List, %List* %List.alloca9, i32 0, i32 0
  store i8 1, i8* %List.discriminant.gep10, align 1
  %List.payload.gep11 = getelementptr inbounds %List, %List* %List.alloca9, i32 0, i32 1
  %"List::Cons.head.gep12" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep11, i32 0, i32 0
  store i32 1, i32* %"List::Cons.head.gep12", align 4
  %List.alloca13 = alloca %List, align 8
  %List.discriminant.gep14 = getelementptr inbounds %List, %List* %List.alloca13, i32 0, i32 0
  store i8 0, i8* %List.discriminant.gep14, align 1
  %List.payload.gep15 = getelementptr inbounds %List, %List* %List.alloca13, i32 0, i32 1
  %List.load = load %List, %List* %List.alloca13, align 8
  %"List::Cons.tail.gep" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep11, i32 0, i32 1
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%List* getelementptr (%List, %List* null, i32 1) to i32))
  %"List::Cons.tail.malloc" = bitcast i8* %malloccall to %List*
  store %List %List.load, %List* %"List::Cons.tail.malloc", align 8
  store %List* %"List::Cons.tail.malloc", %List** %"List::Cons.tail.gep", align 8
  %List.load16 = load %List, %List* %List.alloca9, align 8
  %"List::Cons.tail.gep17" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep7, i32 0, i32 1
  %malloccall18 = tail call i8* @malloc(i32 ptrtoint (%List* getelementptr (%List, %List* null, i32 1) to i32))
  %"List::Cons.tail.malloc19" = bitcast i8* %malloccall18 to %List*
  store %List %List.load16, %List* %"List::Cons.tail.malloc19", align 8
  store %List* %"List::Cons.tail.malloc19", %List** %"List::Cons.tail.gep17", align 8
  %List.load20 = load %List, %List* %List.alloca5, align 8
  %"List::Cons.tail.gep21" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep3, i32 0, i32 1
  %malloccall22 = tail call i8* @malloc(i32 ptrtoint (%List* getelementptr (%List, %List* null, i32 1) to i32))
  %"List::Cons.tail.malloc23" = bitcast i8* %malloccall22 to %List*
  store %List %List.load20, %List* %"List::Cons.tail.malloc23", align 8
  store %List* %"List::Cons.tail.malloc23", %List** %"List::Cons.tail.gep21", align 8
  %List.load24 = load %List, %List* %List.alloca1, align 8
  %"List::Cons.tail.gep25" = getelementptr inbounds { i32, %List* }, { i32, %List* }* %List.payload.gep, i32 0, i32 1
  %malloccall26 = tail call i8* @malloc(i32 ptrtoint (%List* getelementptr (%List, %List* null, i32 1) to i32))
  %"List::Cons.tail.malloc27" = bitcast i8* %malloccall26 to %List*
  store %List %List.load24, %List* %"List::Cons.tail.malloc27", align 8
  store %List* %"List::Cons.tail.malloc27", %List** %"List::Cons.tail.gep25", align 8
  %List.load28 = load %List, %List* %List.alloca, align 8
  %l1.alloca = alloca %List, align 8
  store %List %List.load28, %List* %l1.alloca, align 8
  %l1 = load %List, %List* %l1.alloca, align 8
  %closure.alloca = alloca { i32 (i8*, i32)*, i8* }, align 8
  %closure.code = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, i32 0, i32 0
  store i32 (i8*, i32)* @lambda, i32 (i8*, i32)** %closure.code, align 8
  %closure.env = getelementptr inbounds { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, i32 0, i32 1
  %malloccall29 = tail call i8* @malloc(i32 0)
  %env.malloc = bitcast i8* %malloccall29 to {}*
  %env = bitcast {}* %env.malloc to i8*
  store i8* %env, i8** %closure.env, align 8
  %closure = load { i32 (i8*, i32)*, i8* }, { i32 (i8*, i32)*, i8* }* %closure.alloca, align 8
  %map.call = call %List @map(%List %l1, { i32 (i8*, i32)*, i8* } %closure)
  %l2.alloca = alloca %List, align 8
  store %List %map.call, %List* %l2.alloca, align 8
  %l2 = load %List, %List* %l2.alloca, align 8
  %sum.call = call i32 @sum(%List %l2)
  %s.alloca = alloca i32, align 4
  store i32 %sum.call, i32* %s.alloca, align 4
  %s = load i32, i32* %s.alloca, align 4
  ret i32 %s
}

declare noalias i8* @malloc(i32)

define i32 @lambda(i8* %env_ptr, i32 %params.0) {
lambda.entry:
  %env_ptr1 = bitcast i8* %env_ptr to {}*
  %env = load {}, {}* %env_ptr1, align 1
  %x.alloca = alloca i32, align 4
  store i32 %params.0, i32* %x.alloca, align 4
  %x = load i32, i32* %x.alloca, align 4
  %x2 = load i32, i32* %x.alloca, align 4
  %Int.mul = mul i32 %x, %x2
  ret i32 %Int.mul
}

