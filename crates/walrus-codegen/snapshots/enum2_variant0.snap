---
source: crates/walrus-codegen/src/tests.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define i32 @builtins.putchar.wrapper(i8* %env, i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret i32 %1
}

declare i32 @putchar(i32)

define { i8, {} } @main(i8* %main.env) {
main.entry:
  %"Foo::Bar.alloca" = alloca { i8, {} }, align 8
  %Foo.discriminant.gep = getelementptr inbounds { i8, {} }, { i8, {} }* %"Foo::Bar.alloca", i32 0, i32 0
  store i8 0, i8* %Foo.discriminant.gep, align 1
  %"Foo::Bar" = load { i8, {} }, { i8, {} }* %"Foo::Bar.alloca", align 1
  ret { i8, {} } %"Foo::Bar"
}

