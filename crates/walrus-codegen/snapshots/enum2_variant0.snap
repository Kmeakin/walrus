---
source: crates/walrus-codegen/src/tests.rs
expression: module

---
; ModuleID = 'module'
source_filename = "module"

%Foo = type { i8, {} }

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define {} @builtins.putchar.wrapper(i8* %env, i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret {} zeroinitializer
}

declare i32 @putchar(i32)

define %Foo @main(i8* %main.env) {
main.entry:
  %Foo.alloca = alloca %Foo, align 8
  %Foo.discriminant.gep = getelementptr inbounds %Foo, %Foo* %Foo.alloca, i32 0, i32 0
  store i8 0, i8* %Foo.discriminant.gep, align 1
  %Foo.payload.gep = getelementptr inbounds %Foo, %Foo* %Foo.alloca, i32 0, i32 1
  %Foo.load = load %Foo, %Foo* %Foo.alloca, align 1
  ret %Foo %Foo.load
}

