---
source: crates/walrus-codegen/src/codegen.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define i32 @main(i8* %main.env) {
main.entry:
  %closure.alloca = alloca { i32 (i8*)*, i8* }, align 8
  %closure.code = getelementptr inbounds { i32 (i8*)*, i8* }, { i32 (i8*)*, i8* }* %closure.alloca, i32 0, i32 0
  store i32 (i8*)* @lambda, i32 (i8*)** %closure.code, align 8
  %closure.env = getelementptr inbounds { i32 (i8*)*, i8* }, { i32 (i8*)*, i8* }* %closure.alloca, i32 0, i32 1
  store i8* null, i8** %closure.env, align 8
  %closure = load { i32 (i8*)*, i8* }, { i32 (i8*)*, i8* }* %closure.alloca, align 8
  %get_five.alloca = alloca { i32 (i8*)*, i8* }, align 8
  store { i32 (i8*)*, i8* } %closure, { i32 (i8*)*, i8* }* %get_five.alloca, align 8
  %get_five = load { i32 (i8*)*, i8* }, { i32 (i8*)*, i8* }* %get_five.alloca, align 8
  %closure.code1 = extractvalue { i32 (i8*)*, i8* } %get_five, 0
  %closure.env2 = extractvalue { i32 (i8*)*, i8* } %get_five, 1
  %call = call i32 %closure.code1(i8* %closure.env2)
  ret i32 %call
}

define i32 @lambda(i8* %env) {
lambda.entry:
  ret i32 5
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #0

attributes #0 = { nounwind }

