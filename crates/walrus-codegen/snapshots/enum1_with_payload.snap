---
source: crates/walrus-codegen/src/tests.rs
expression: llvm_module.print_to_string().to_string()

---
; ModuleID = 'module'
source_filename = "module"

%Foo = type { {}, { i32 } }

define void @builtins.exit.wrapper(i8* %env, i32 %status) {
  call void @exit(i32 %status)
  unreachable
}

declare void @exit(i32)

define i32 @builtins.putchar.wrapper(i8* %env, i32 %c) {
  %1 = call i32 @putchar(i32 %c)
  ret i32 %1
}

declare i32 @putchar(i32)

define %Foo @main(i8* %main.env) {
main.entry:
  %"Foo::Bar.alloca" = alloca %Foo, align 8
  %Foo.discriminant.gep = getelementptr inbounds %Foo, %Foo* %"Foo::Bar.alloca", i32 0, i32 0
  store {} zeroinitializer, {}* %Foo.discriminant.gep, align 1
  %payload.gep = getelementptr inbounds %Foo, %Foo* %"Foo::Bar.alloca", i32 0, i32 1
  %"Foo::Bar.x.gep" = getelementptr inbounds { i32 }, { i32 }* %payload.gep, i32 0, i32 0
  store i32 5, i32* %"Foo::Bar.x.gep", align 4
  %"Foo::Bar" = load %Foo, %Foo* %"Foo::Bar.alloca", align 4
  ret %Foo %"Foo::Bar"
}

