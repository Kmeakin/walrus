---
source: crates/walrus-semantics/src/ty.rs
expression: types

---
InferenceResult {
    type_of_expr: {
        0: Fn(
            FnType {
                params: [
                    Primitive(
                        Int,
                    ),
                ],
                ret: Primitive(
                    Bool,
                ),
            },
        ),
        1: Fn(
            FnType {
                params: [
                    Primitive(
                        Int,
                    ),
                ],
                ret: Primitive(
                    Bool,
                ),
            },
        ),
        2: Tuple(
            [
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
            ],
        ),
        3: Tuple(
            [
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
            ],
        ),
        4: Primitive(
            Int,
        ),
        5: Primitive(
            Int,
        ),
        6: Primitive(
            Bool,
        ),
        7: Primitive(
            Bool,
        ),
        8: Primitive(
            Bool,
        ),
        9: Fn(
            FnType {
                params: [
                    Primitive(
                        Int,
                    ),
                ],
                ret: Primitive(
                    Bool,
                ),
            },
        ),
        10: Primitive(
            Int,
        ),
        11: Primitive(
            Int,
        ),
        12: Primitive(
            Int,
        ),
        13: Primitive(
            Bool,
        ),
        14: Primitive(
            Bool,
        ),
        15: Primitive(
            Bool,
        ),
        16: Primitive(
            Bool,
        ),
        17: Primitive(
            Int,
        ),
        18: Primitive(
            Int,
        ),
        19: Primitive(
            Bool,
        ),
        20: Primitive(
            Bool,
        ),
        21: Primitive(
            Bool,
        ),
        22: Fn(
            FnType {
                params: [
                    Primitive(
                        Int,
                    ),
                ],
                ret: Primitive(
                    Bool,
                ),
            },
        ),
        23: Primitive(
            Int,
        ),
        24: Primitive(
            Int,
        ),
        25: Primitive(
            Int,
        ),
        26: Primitive(
            Bool,
        ),
        27: Primitive(
            Bool,
        ),
        28: Primitive(
            Bool,
        ),
        29: Primitive(
            Bool,
        ),
    },
    type_of_type: {
        0: Tuple(
            [
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
                Fn(
                    FnType {
                        params: [
                            Primitive(
                                Int,
                            ),
                        ],
                        ret: Primitive(
                            Bool,
                        ),
                    },
                ),
            ],
        ),
        1: Primitive(
            Int,
        ),
        2: Primitive(
            Bool,
        ),
        3: Primitive(
            Int,
        ),
        4: Primitive(
            Bool,
        ),
    },
    type_of_pat: {
        0: Primitive(
            Int,
        ),
        1: Primitive(
            Int,
        ),
    },
    type_of_fn: {
        0: FnType {
            params: [],
            ret: Tuple(
                [
                    Fn(
                        FnType {
                            params: [
                                Primitive(
                                    Int,
                                ),
                            ],
                            ret: Primitive(
                                Bool,
                            ),
                        },
                    ),
                    Fn(
                        FnType {
                            params: [
                                Primitive(
                                    Int,
                                ),
                            ],
                            ret: Primitive(
                                Bool,
                            ),
                        },
                    ),
                ],
            ),
        },
        1: FnType {
            params: [
                Primitive(
                    Int,
                ),
            ],
            ret: Primitive(
                Bool,
            ),
        },
        2: FnType {
            params: [
                Primitive(
                    Int,
                ),
            ],
            ret: Primitive(
                Bool,
            ),
        },
    },
    diagnostics: [],
}
